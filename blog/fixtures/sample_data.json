[{"model": "auth.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$180000$nqDzW8thcjGK$MQFBZpysTuVqeTwN/+8RMSiz8l6MMR/BYBFtYWerCp4=", "last_login": "2020-07-13T12:46:25.082Z", "is_superuser": true, "username": "mabulgu", "first_name": "", "last_name": "", "email": "", "is_staff": true, "is_active": true, "date_joined": "2020-07-13T12:45:26.401Z", "groups": [], "user_permissions": []}}, {"model": "blog.post", "pk": 1, "fields": {"author": 1, "title": "System Craftsmanship: Software Craftsmanship in the Cloud Native Era", "text": "As software people like to find bugs in the software systems, they also tend to find the anomalies or bugs in the processes and fix them or propose other ways; other procedures. This is because of an instinct that continuously pushes them to find the best: continuous improvement.\r\n\r\nFor a long time, there have been a lot of methodologies came along in the software industry like Spiral Development, V-model, and Waterfall model and all these came out because software development is a process that includes \u201cproduction\u201d in it, and because of that production thing, it has to have a well-working process to create good outputs. Of course, perspective is changed from time to time to these \u201coutputs\u201d (sometimes it became \u201ctime and revenue\u201d, sometimes \u201cproduct quality\u201d, sometimes risks, sometimes all) and this was what pushed the software people to change the methodologies as time goes by for better processes. And these methodologies labeled as \u201cheavyweight\u201d.\r\n\r\nSo, a few \u201clightweight\u201d software development methodologies emerged between the late 90s and early millennium, as a solution to the heavyweight ones. Some software experts, as the creators of these \u201clightweight\u201d methodologies, decided to get together, share what they were doing and discuss a more common alternative to heavyweight, high-ritual and document-based approaches like Waterfall or Rational Unified Process (RUP) that created a lot of problems back in the days.", "created_date": "2020-07-13T12:46:30Z", "published_date": "2020-07-13T12:47:08Z"}}, {"model": "blog.post", "pk": 2, "fields": {"author": 1, "title": "Strimzi Kafka CLI: Managing Strimzi in a Kafka Native Way", "text": "Strimzi Kafka CLI is a CLI that helps traditional Apache Kafka users -mostly administrators- to easily adapt Strimzi, a Kubernetes operator for Apache Kafka.\r\n\r\nIntention here is to ramp up Strimzi usage by creating a similar CLI experience with traditional Apache Kafka binaries. \r\n\r\nkfk command stands for the usual kafka-* prefix of the Apache Kafka runnable files which are located in bin directory. There are options provided like topics, console-consumer, etc. which also mostly stand for the rest of the runnable file names like kafka-topic.sh.\r\n\r\nHowever, because of the nature of Strimzi and its capabilities, there are also unusual options like clusters which is used for cluster configuration or users which is used for user management and configuration.", "created_date": "2020-07-13T12:47:11Z", "published_date": "2020-07-13T12:48:09Z"}}, {"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2020-07-13T12:47:11.468Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "System Craftsmanship: Software Craftsmanship in the Cloud Native Era", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2020-07-13T12:48:12.344Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Strimzi Kafka CLI: Managing Strimzi in a Kafka Native Way", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}]